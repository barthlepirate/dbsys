package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
  
    private OpIterator child1;
    private OpIterator child2;
    
    private TupleDesc td1;
    private TupleDesc td2;
    
    // Temporary tuples for accessing next matching tuple
    private Tuple tdn1;
    private Tuple tdn2;
    
    private JoinPredicate p;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
      	this.child1 = child1;
      	this.child2 = child2;
      	this.td1 = child1.getTupleDesc();
      	this.td2 = child2.getTupleDesc();
      	this.tdn1 = null;
      	this.tdn2 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     */
    public String getJoinField1Name() {
        int i = p.getField1();
        return td1.getFieldName(i);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     */
    public String getJoinField2Name() {
        return td2.getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
      	child2.open();
      	super.open();
    }

    public void close() {
        child1.close();
      	child2.close();
      	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
      	child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (child1.hasNext() || tdn1 != null) {
      		if (tdn1 == null)
      			tdn1 = child1.next();
      		while (child2.hasNext()) {
      			tdn2 = child2.next();
      			if (this.p.filter(tdn1, tdn2)) {
      				Tuple mergedTuple = new Tuple(this.getTupleDesc());
      				
      				this.td1 = tdn1.getTupleDesc();
      				this.td2 = tdn2.getTupleDesc();
      				
      			    int totnum = td1.numFields() + td2.numFields();
      				for (int i = 0; i < totnum; i++) {
      				  if (i < td1.numFields()) {
      						// Add up td1 fields 
      						mergedTuple.setField(i, tdn1.getField(i));
      					} else {
      						// Add up td2 fields
      						mergedTuple.setField(i, tdn2.getField(i - td1.numFields()));
      					}
      				}
      				return mergedTuple;
      			}
    		}
    		tdn1 = null;
    		// Prepare child2 for the next outer iteration
    		child2.rewind();
    	}
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (children.length > 1) {
    	    if (this.child1 != children[0])
        	    this.child1 = children[0];
        	if (this.child2 != children[1])
        	    this.child2 = children[1];
    	}
    }

}
